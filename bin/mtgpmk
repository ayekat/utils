#!/usr/bin/env sh

set -e

# Constants:
APPNAME="$(basename "$0")"
FAILURE=1
SUCCESS=0
MTGP_SITE='http://magiccards.info'
MTGP_QUERY="$MTGP_SITE/query"
MTGP_SCANS="$MTGP_SITE/scans/en"
XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
CACHEDIR="$XDG_CACHE_HOME/$APPNAME"
CACHEFILE="$CACHEDIR/ids.list"
E_USER=1
E_FAIL=2
NULL=/dev/null

# Default values:
proxyfile='Proxyfile'
outpath="$PWD"

sedfy()
{
	echo "$1" | sed -e 's/\//\\\//g'
}

urlfy()
{
	echo "$1" | sed -e 's/ /+/g'
}

# Query:
fetch_url()
{
	url_content="$(curl -s "${MTGP_QUERY}?q=$(urlfy "$cardname")")"
	url_candidates="$(echo "$url_content" | \
		grep "<img src=\"$(sedfy "$MTGP_SCANS").\\+\"")"
	test -n "$url_candidates" || return $FAILURE
	cardurl="$(echo "$url_candidates" | sed 's/^.*<img src="//;s/".*$//')"
	cardcount="$(echo "$cardurl" | wc -l)"
}

# ID:
fetch_id()
{
	fetch_url || return $FAILURE
	cardurl="$(echo "$cardurl" | head -n 1)"
	cardid="$(echo "$cardurl" | \
		sed "s/\\.jpg$//;s/$(sedfy "$MTGP_SCANS")\\///;s/\\//_/")"
}
cache_id()
{
	if [ $cardcount -gt 1 ]; then
		printf "Warning: multiple results for [%s]\n" "$cardname"
	else
		mkdir -p "$CACHEDIR"
		printf "%s\t%s\n" "$cardid" "$cardname" >> "$CACHEFILE"
	fi
}
is_cached()
{
	if grep "$cardname\$" "$CACHEFILE" 1>"$NULL" 2>"$NULL"; then
		return $SUCCESS
	else
		return $FAILURE
	fi
}
get_id_from_cache()
{
	cardid="$(grep "$cardname\$" "$CACHEFILE" | cut -f1)"
}
get_id()
{
	if [ -d "$CACHEDIR" ] && [ -r "$CACHEFILE" ] && is_cached; then
		printf "ID for [%s] is already cached\n" "$cardname"
		get_id_from_cache
	else
		printf "Fetching ID for [%s]\n" "$cardname"
		fetch_id || die $E_FAIL 'No results for [%s]' "$cardname"
		cache_id
	fi
}

# Image:
fetch_card()
{
	if is_cached; then
		get_id_from_cache
		cardurl="$MTGP_SCANS/$(echo "$cardid" | sed 's/_/\//').jpg"
	else
		fetch_url
	fi
	printf "Fetching image for [%s] at %s\n" "$cardname" "$cardurl"
	curl -o "$cardpath_cached" "$cardurl" || die $E_FAIL 'Failed to fetch image'
}
prepare_card()
{
	cardpath="$outpath/${cardid}.jpg"
	if [ -e "$cardpath" ]; then
		printf "Image for [%s] is already cached\n" "$cardname"
		return
	fi

	cardpath_cached="$CACHEDIR/${cardid}.jpg"
	if [ ! -e "$cardpath_cached" ]; then
		fetch_card
	fi
	cp "$cardpath_cached" "$cardpath"

}

# LaTeX:
generate_preamble()
{
	cat > "$texpath" <<- EOF
	\\documentclass[a4paper]{article}
	\\usepackage[left=1cm,right=1cm,top=1cm,bottom=1cm]{geometry}
	\\usepackage{graphicx}
	\\setlength{\\parindent}{0em}
	\\setlength{\\parskip}{0em}
	\\begin{document}
	EOF
}
generate_line()
{
	cat >> "$texpath" <<- EOF
	\\includegraphics[width=6.25cm]{$cardid}% $cardname
	EOF
}
generate_linebreak()
{
	cat >> "$texpath" <<- EOF
	\\\\
	EOF
}
generate_epilog()
{
	cat >> "$texpath" <<- EOF
	\\end{document}
	EOF
}
generate_tex()
{
	generate_preamble
	colno=0
	while read -r l; do
		cardname="$l"
		cardid=''
		cardurl=''
		get_id
		prepare_card
		generate_line
		colno=$((colno + 1))
		if [ $colno -eq 3 ]; then
			colno=0
			generate_linebreak
		fi
	done < "$proxyfile"
	generate_epilog
}
compile_tex()
{
	pdflatex "$texpath" || die $E_FAIL 'Failed to generate PDF file'
}

die()
{
	retval=$1; shift
	format="$1"; shift
	printf "$format\n" "$@" >&2
	if [ $retval -eq $E_USER ]; then
		printf "Run with -h for usage.\n" >&2
	fi
	exit $retval
}

usage()
{
	cat <<- EOF
	$APPNAME: Create quick'n'dirty "Magic: the Gathering"â„¢ card proxies.

	Usage: $APPNAME [OPTION ...]"

	Options:
	  -f PROXYFILE  Use PROXYFILE as Proxyfile [default=$proxyfile]
	  -h            Display this help
	  -o OUTPATH    Directory into which the files are stored [default=$outpath]
	EOF
}

# Read arguments:
while getopts :fh:o: opt; do
	case "$opt" in
		f) proxyfile="$OPTARG" ;;
		h) help; exit 1 ;;
		o) outpath="$OPTARG" ;;
		'?') die $E_USER 'Invalid argument: %s' "$OPTARG" ;;
	esac
done
argshift=$((OPTIND - 1))

# Check arguments
proxyfile="$(readlink -f "$proxyfile")"
test -e "$proxyfile" || die 2 'No Proxyfile found'
test -r "$proxyfile" || die 3 '%s: Permission denied' "$proxyfile"
shift $argshift
test $# -eq 0 || die $E_USER 'Trailing arguments: %s' "$*"

texpath="$outpath/proxy.tex"
generate_tex
compile_tex
